// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WorkpieceInfo.proto

#ifndef PROTOBUF_WorkpieceInfo_2eproto__INCLUDED
#define PROTOBUF_WorkpieceInfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Team.pb.h"
// @@protoc_insertion_point(includes)

namespace llsf_msgs {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_WorkpieceInfo_2eproto();
void protobuf_AssignDesc_WorkpieceInfo_2eproto();
void protobuf_ShutdownFile_WorkpieceInfo_2eproto();

class Workpiece;
class WorkpieceInfo;

enum Workpiece_CompType {
  Workpiece_CompType_COMP_ID = 2000,
  Workpiece_CompType_MSG_TYPE = 55
};
bool Workpiece_CompType_IsValid(int value);
const Workpiece_CompType Workpiece_CompType_CompType_MIN = Workpiece_CompType_MSG_TYPE;
const Workpiece_CompType Workpiece_CompType_CompType_MAX = Workpiece_CompType_COMP_ID;
const int Workpiece_CompType_CompType_ARRAYSIZE = Workpiece_CompType_CompType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Workpiece_CompType_descriptor();
inline const ::std::string& Workpiece_CompType_Name(Workpiece_CompType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Workpiece_CompType_descriptor(), value);
}
inline bool Workpiece_CompType_Parse(
    const ::std::string& name, Workpiece_CompType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Workpiece_CompType>(
    Workpiece_CompType_descriptor(), name, value);
}
enum WorkpieceInfo_CompType {
  WorkpieceInfo_CompType_COMP_ID = 2000,
  WorkpieceInfo_CompType_MSG_TYPE = 56
};
bool WorkpieceInfo_CompType_IsValid(int value);
const WorkpieceInfo_CompType WorkpieceInfo_CompType_CompType_MIN = WorkpieceInfo_CompType_MSG_TYPE;
const WorkpieceInfo_CompType WorkpieceInfo_CompType_CompType_MAX = WorkpieceInfo_CompType_COMP_ID;
const int WorkpieceInfo_CompType_CompType_ARRAYSIZE = WorkpieceInfo_CompType_CompType_MAX + 1;

const ::google::protobuf::EnumDescriptor* WorkpieceInfo_CompType_descriptor();
inline const ::std::string& WorkpieceInfo_CompType_Name(WorkpieceInfo_CompType value) {
  return ::google::protobuf::internal::NameOfEnum(
    WorkpieceInfo_CompType_descriptor(), value);
}
inline bool WorkpieceInfo_CompType_Parse(
    const ::std::string& name, WorkpieceInfo_CompType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<WorkpieceInfo_CompType>(
    WorkpieceInfo_CompType_descriptor(), name, value);
}
// ===================================================================

class Workpiece : public ::google::protobuf::Message {
 public:
  Workpiece();
  virtual ~Workpiece();

  Workpiece(const Workpiece& from);

  inline Workpiece& operator=(const Workpiece& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Workpiece& default_instance();

  void Swap(Workpiece* other);

  // implements Message ----------------------------------------------

  inline Workpiece* New() const { return New(NULL); }

  Workpiece* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Workpiece& from);
  void MergeFrom(const Workpiece& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Workpiece* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Workpiece_CompType CompType;
  static const CompType COMP_ID =
    Workpiece_CompType_COMP_ID;
  static const CompType MSG_TYPE =
    Workpiece_CompType_MSG_TYPE;
  static inline bool CompType_IsValid(int value) {
    return Workpiece_CompType_IsValid(value);
  }
  static const CompType CompType_MIN =
    Workpiece_CompType_CompType_MIN;
  static const CompType CompType_MAX =
    Workpiece_CompType_CompType_MAX;
  static const int CompType_ARRAYSIZE =
    Workpiece_CompType_CompType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CompType_descriptor() {
    return Workpiece_CompType_descriptor();
  }
  static inline const ::std::string& CompType_Name(CompType value) {
    return Workpiece_CompType_Name(value);
  }
  static inline bool CompType_Parse(const ::std::string& name,
      CompType* value) {
    return Workpiece_CompType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // required string at_machine = 2;
  bool has_at_machine() const;
  void clear_at_machine();
  static const int kAtMachineFieldNumber = 2;
  const ::std::string& at_machine() const;
  void set_at_machine(const ::std::string& value);
  void set_at_machine(const char* value);
  void set_at_machine(const char* value, size_t size);
  ::std::string* mutable_at_machine();
  ::std::string* release_at_machine();
  void set_allocated_at_machine(::std::string* at_machine);

  // optional bool visible = 3;
  bool has_visible() const;
  void clear_visible();
  static const int kVisibleFieldNumber = 3;
  bool visible() const;
  void set_visible(bool value);

  // optional .llsf_msgs.Team team_color = 4;
  bool has_team_color() const;
  void clear_team_color();
  static const int kTeamColorFieldNumber = 4;
  ::llsf_msgs::Team team_color() const;
  void set_team_color(::llsf_msgs::Team value);

  // @@protoc_insertion_point(class_scope:llsf_msgs.Workpiece)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_at_machine();
  inline void clear_has_at_machine();
  inline void set_has_visible();
  inline void clear_has_visible();
  inline void set_has_team_color();
  inline void clear_has_team_color();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr at_machine_;
  ::google::protobuf::uint32 id_;
  bool visible_;
  int team_color_;
  friend void  protobuf_AddDesc_WorkpieceInfo_2eproto();
  friend void protobuf_AssignDesc_WorkpieceInfo_2eproto();
  friend void protobuf_ShutdownFile_WorkpieceInfo_2eproto();

  void InitAsDefaultInstance();
  static Workpiece* default_instance_;
};
// -------------------------------------------------------------------

class WorkpieceInfo : public ::google::protobuf::Message {
 public:
  WorkpieceInfo();
  virtual ~WorkpieceInfo();

  WorkpieceInfo(const WorkpieceInfo& from);

  inline WorkpieceInfo& operator=(const WorkpieceInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WorkpieceInfo& default_instance();

  void Swap(WorkpieceInfo* other);

  // implements Message ----------------------------------------------

  inline WorkpieceInfo* New() const { return New(NULL); }

  WorkpieceInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WorkpieceInfo& from);
  void MergeFrom(const WorkpieceInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WorkpieceInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef WorkpieceInfo_CompType CompType;
  static const CompType COMP_ID =
    WorkpieceInfo_CompType_COMP_ID;
  static const CompType MSG_TYPE =
    WorkpieceInfo_CompType_MSG_TYPE;
  static inline bool CompType_IsValid(int value) {
    return WorkpieceInfo_CompType_IsValid(value);
  }
  static const CompType CompType_MIN =
    WorkpieceInfo_CompType_CompType_MIN;
  static const CompType CompType_MAX =
    WorkpieceInfo_CompType_CompType_MAX;
  static const int CompType_ARRAYSIZE =
    WorkpieceInfo_CompType_CompType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CompType_descriptor() {
    return WorkpieceInfo_CompType_descriptor();
  }
  static inline const ::std::string& CompType_Name(CompType value) {
    return WorkpieceInfo_CompType_Name(value);
  }
  static inline bool CompType_Parse(const ::std::string& name,
      CompType* value) {
    return WorkpieceInfo_CompType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .llsf_msgs.Workpiece workpieces = 1;
  int workpieces_size() const;
  void clear_workpieces();
  static const int kWorkpiecesFieldNumber = 1;
  const ::llsf_msgs::Workpiece& workpieces(int index) const;
  ::llsf_msgs::Workpiece* mutable_workpieces(int index);
  ::llsf_msgs::Workpiece* add_workpieces();
  ::google::protobuf::RepeatedPtrField< ::llsf_msgs::Workpiece >*
      mutable_workpieces();
  const ::google::protobuf::RepeatedPtrField< ::llsf_msgs::Workpiece >&
      workpieces() const;

  // @@protoc_insertion_point(class_scope:llsf_msgs.WorkpieceInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::llsf_msgs::Workpiece > workpieces_;
  friend void  protobuf_AddDesc_WorkpieceInfo_2eproto();
  friend void protobuf_AssignDesc_WorkpieceInfo_2eproto();
  friend void protobuf_ShutdownFile_WorkpieceInfo_2eproto();

  void InitAsDefaultInstance();
  static WorkpieceInfo* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Workpiece

// required uint32 id = 1;
inline bool Workpiece::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Workpiece::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Workpiece::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Workpiece::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Workpiece::id() const {
  // @@protoc_insertion_point(field_get:llsf_msgs.Workpiece.id)
  return id_;
}
inline void Workpiece::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:llsf_msgs.Workpiece.id)
}

// required string at_machine = 2;
inline bool Workpiece::has_at_machine() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Workpiece::set_has_at_machine() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Workpiece::clear_has_at_machine() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Workpiece::clear_at_machine() {
  at_machine_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_at_machine();
}
inline const ::std::string& Workpiece::at_machine() const {
  // @@protoc_insertion_point(field_get:llsf_msgs.Workpiece.at_machine)
  return at_machine_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Workpiece::set_at_machine(const ::std::string& value) {
  set_has_at_machine();
  at_machine_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:llsf_msgs.Workpiece.at_machine)
}
inline void Workpiece::set_at_machine(const char* value) {
  set_has_at_machine();
  at_machine_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:llsf_msgs.Workpiece.at_machine)
}
inline void Workpiece::set_at_machine(const char* value, size_t size) {
  set_has_at_machine();
  at_machine_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:llsf_msgs.Workpiece.at_machine)
}
inline ::std::string* Workpiece::mutable_at_machine() {
  set_has_at_machine();
  // @@protoc_insertion_point(field_mutable:llsf_msgs.Workpiece.at_machine)
  return at_machine_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Workpiece::release_at_machine() {
  // @@protoc_insertion_point(field_release:llsf_msgs.Workpiece.at_machine)
  clear_has_at_machine();
  return at_machine_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Workpiece::set_allocated_at_machine(::std::string* at_machine) {
  if (at_machine != NULL) {
    set_has_at_machine();
  } else {
    clear_has_at_machine();
  }
  at_machine_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), at_machine);
  // @@protoc_insertion_point(field_set_allocated:llsf_msgs.Workpiece.at_machine)
}

// optional bool visible = 3;
inline bool Workpiece::has_visible() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Workpiece::set_has_visible() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Workpiece::clear_has_visible() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Workpiece::clear_visible() {
  visible_ = false;
  clear_has_visible();
}
inline bool Workpiece::visible() const {
  // @@protoc_insertion_point(field_get:llsf_msgs.Workpiece.visible)
  return visible_;
}
inline void Workpiece::set_visible(bool value) {
  set_has_visible();
  visible_ = value;
  // @@protoc_insertion_point(field_set:llsf_msgs.Workpiece.visible)
}

// optional .llsf_msgs.Team team_color = 4;
inline bool Workpiece::has_team_color() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Workpiece::set_has_team_color() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Workpiece::clear_has_team_color() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Workpiece::clear_team_color() {
  team_color_ = 0;
  clear_has_team_color();
}
inline ::llsf_msgs::Team Workpiece::team_color() const {
  // @@protoc_insertion_point(field_get:llsf_msgs.Workpiece.team_color)
  return static_cast< ::llsf_msgs::Team >(team_color_);
}
inline void Workpiece::set_team_color(::llsf_msgs::Team value) {
  assert(::llsf_msgs::Team_IsValid(value));
  set_has_team_color();
  team_color_ = value;
  // @@protoc_insertion_point(field_set:llsf_msgs.Workpiece.team_color)
}

// -------------------------------------------------------------------

// WorkpieceInfo

// repeated .llsf_msgs.Workpiece workpieces = 1;
inline int WorkpieceInfo::workpieces_size() const {
  return workpieces_.size();
}
inline void WorkpieceInfo::clear_workpieces() {
  workpieces_.Clear();
}
inline const ::llsf_msgs::Workpiece& WorkpieceInfo::workpieces(int index) const {
  // @@protoc_insertion_point(field_get:llsf_msgs.WorkpieceInfo.workpieces)
  return workpieces_.Get(index);
}
inline ::llsf_msgs::Workpiece* WorkpieceInfo::mutable_workpieces(int index) {
  // @@protoc_insertion_point(field_mutable:llsf_msgs.WorkpieceInfo.workpieces)
  return workpieces_.Mutable(index);
}
inline ::llsf_msgs::Workpiece* WorkpieceInfo::add_workpieces() {
  // @@protoc_insertion_point(field_add:llsf_msgs.WorkpieceInfo.workpieces)
  return workpieces_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::llsf_msgs::Workpiece >*
WorkpieceInfo::mutable_workpieces() {
  // @@protoc_insertion_point(field_mutable_list:llsf_msgs.WorkpieceInfo.workpieces)
  return &workpieces_;
}
inline const ::google::protobuf::RepeatedPtrField< ::llsf_msgs::Workpiece >&
WorkpieceInfo::workpieces() const {
  // @@protoc_insertion_point(field_list:llsf_msgs.WorkpieceInfo.workpieces)
  return workpieces_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace llsf_msgs

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::llsf_msgs::Workpiece_CompType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::llsf_msgs::Workpiece_CompType>() {
  return ::llsf_msgs::Workpiece_CompType_descriptor();
}
template <> struct is_proto_enum< ::llsf_msgs::WorkpieceInfo_CompType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::llsf_msgs::WorkpieceInfo_CompType>() {
  return ::llsf_msgs::WorkpieceInfo_CompType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_WorkpieceInfo_2eproto__INCLUDED
